// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(uuid())
  name              String
  email             String              @unique
  password          String? // Hashed password
  avatarUrl         String? // Optional profile picture
  plan              Plan                @default(FREE) // Subscription plan
  podcasts          Podcast[]
  podcastSubscriber PodcastSubscriber[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  EpisodeAnalytics  EpisodeAnalytics[]
  Payment           Payment[]
}

enum Plan {
  FREE
  PRO
  ENTERPRISE
}

model Podcast {
  id            String              @id @default(uuid())
  userId        String
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  title         String
  description   String?
  coverImageUrl String?
  rssFeedUrl    String              @unique
  episodes      Episode[]
  subscribers   PodcastSubscriber[]
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
}

model Episode {
  id          String             @id @default(uuid())
  podcastId   String
  podcast     Podcast            @relation(fields: [podcastId], references: [id], onDelete: Cascade)
  title       String
  description String?
  audioUrl    String // S3 URL or CDN URL
  duration    Int // In seconds
  chapters    Chapter[]
  publishedAt DateTime? // Null if draft
  analytics   EpisodeAnalytics[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model Chapter {
  id        String   @id @default(uuid())
  episodeId String
  episode   Episode  @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  timestamp Int // Time in seconds
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PodcastSubscriber {
  id        String   @id @default(uuid())
  podcastId String
  podcast   Podcast  @relation(fields: [podcastId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model EpisodeAnalytics {
  id        String   @id @default(uuid())
  episodeId String
  episode   Episode  @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull) // Optional for anonymous listeners
  ipAddress String?
  device    String? // e.g., "iPhone", "Windows", "Mac"
  country   String? // Extract from IP geolocation
  timestamp DateTime @default(now())
}

model Payment {
  id              String        @id @default(uuid())
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount          Decimal
  currency        String        @default("USD")
  status          PaymentStatus
  stripeSessionId String? // Store Stripe Checkout session ID
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}
