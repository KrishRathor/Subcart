// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String? // Hashed password
  avatarUrl String? // Optional profile picture
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Store     Store[]
}

model Store {
  id           String     @id @default(cuid())
  name         String // Name of the online store
  subdomain    String?    @unique
  customDomain String?    @unique
  description  String
  ownerId      String
  owner        User       @relation(fields: [ownerId], references: [id], onDelete: Cascade) // Relation to the User model
  products     Product[]
  orders       Order[]
  customers    Customer[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Product {
  id            String      @id @default(cuid())
  name          String
  description   String?
  price         Decimal     @db.Decimal(10, 2)
  sku           String?     @unique
  stockQuantity Int         @default(0)
  storeId       String
  store         Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  orderItems    OrderItem[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Customer {
  id        String   @id @default(cuid())
  email     String
  name      String?
  storeId   String
  store     Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, storeId]) // A customer email should be unique within a specific store
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

model Order {
  id              String      @id @default(cuid())
  status          OrderStatus @default(PENDING)
  totalAmount     Decimal     @db.Decimal(10, 2)
  shippingAddress String?
  billingAddress  String?
  storeId         String
  store           Store       @relation(fields: [storeId], references: [id], onDelete: Restrict) // Relation to the Store model
  customerId      String
  customer        Customer    @relation(fields: [customerId], references: [id], onDelete: Restrict) // Relation to the Customer model
  items           OrderItem[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model OrderItem {
  id              String  @id @default(cuid())
  quantity        Int
  priceAtPurchase Decimal @db.Decimal(10, 2) // Price of the product at the time of purchase (important if product prices change)
  orderId         String
  order           Order   @relation(fields: [orderId], references: [id], onDelete: Cascade) // Relation to the Order model
  productId       String
  product         Product @relation(fields: [productId], references: [id], onDelete: Restrict) // Relation to the Product model
}
